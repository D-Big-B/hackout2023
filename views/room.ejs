<!-- <!DOCTYPE html>
<html lang="en">
  <body>
    <div class="main">
      <div class="main__left">
        <div class="main__videos">
          <div id="video-grid">
            <canvas id="canvas" class="drawing-canvas"></canvas>
          </div>
        </div>
        <div class="main__controls">
          <div class="main__controls__block">
            <di
              onclick="muteUnmute()"
              class="main__controls__button main__mute_button"
            >
              <i class="fas fa-microphone"></i>
              <span>Mute</span>
            </di>
            <div
              onclick="playStop()"
              class="main__controls__button main__video_button"
            >
              <i class="fas fa-video"></i>
              <span>Stop Video</span>
            </div>
          </div>
          <div class="main__controls__block">
            <div class="main__controls__button">
              <i class="fas fa-shield-alt"></i>
              <span>Security</span>
            </div>
            <div class="main__controls__button">
              <i class="fas fa-user-friends"></i>
              <span>Participants</span>
            </div>
            <div class="main__controls__button">
              <i class="fas fa-comment-alt"></i>
              <span>Chat</span>
            </div>
          </div>
          <div class="main__controls__block">
            <div class="main__controls__button">
              <span class="leave_meeting">Leave Meeting</span>
            </div>
          </div>
        </div>
      </div>
      <div class="main__right">
        <div class="main__header">
          <h6>Chat</h6>
        </div>
        <div class="main__chat__window">
          <ul class="messages"></ul>
        </div>
        <div class="main__message__container">
          <input
            type="text"
            id="chat_message"
            placeholder="Type message here..."
          />
        </div>
      </div>
    </div>

    <script src="script.js"></script>
  </body>
</html> -->

<!DOCTYPE html>
<html>
  <head>
    <title>Simple Background Subtraction</title>
    <link rel="stylesheet" href="style.css" />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />
    <script src="js/three.js"></script>

    <script type="text/javascript" src="js/dat.gui.min.js"></script>

    <script src="jsartoolkit5/artoolkit.min.js"></script>
    <script src="jsartoolkit5/artoolkit.api.js"></script>

    <script src="threex/threex-artoolkitsource.js"></script>
    <script src="threex/threex-artoolkitcontext.js"></script>
    <script src="threex/threex-arbasecontrols.js"></script>
    <script src="threex/threex-armarkercontrols.js"></script>
    <script
      defer
      src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"
    ></script>
    <script
      src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
      integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
      crossorigin="anonymous"
    ></script>

    <script src="socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.4.5/dist/peerjs.min.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css"
      integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script>
      const ROOM_ID = "<%= roomId %>";
    </script>
  </head>
  <body>
    <div id="video-grid"></div>
    <video id="video" autoplay style="display: none"></video>
    <canvas id="canvas" class="drawing-canvas" style="display: none"></canvas>
    <script src="script.js"></script>
    <script>
      let scene, camera, renderer, clock, deltaTime, totalTime, texture;

      let arToolkitSource, arToolkitContext;

      let markerRoot1;

      let mesh1;
      let gui;
      let video = document.getElementById("video");
      const canvas = document.querySelector(".drawing-canvas");
      const ctx = canvas.getContext("2d");

      initialize();
      animate();

      function initialize() {
        scene = new THREE.Scene();

        let ambientLight = new THREE.AmbientLight(0xcccccc, 0.5);
        scene.add(ambientLight);

        camera = new THREE.Camera();
        scene.add(camera);

        renderer = new THREE.WebGLRenderer({
          antialias: true,
          alpha: true,
        });
        renderer.setClearColor(new THREE.Color("lightgrey"), 0);
        renderer.setSize(640, 480);
        renderer.domElement.style.position = "absolute";
        renderer.domElement.style.top = "0px";
        renderer.domElement.style.left = "0px";
        document.body.appendChild(renderer.domElement);

        clock = new THREE.Clock();
        deltaTime = 0;
        totalTime = 0;

        ////////////////////////////////////////////////////////////
        // setup arToolkitSource
        ////////////////////////////////////////////////////////////

        arToolkitSource = new THREEx.ArToolkitSource({
          sourceType: "webcam",
        });

        function onResize() {
          arToolkitSource.onResize();
          arToolkitSource.copySizeTo(renderer.domElement);
          if (arToolkitContext.arController !== null) {
            arToolkitSource.copySizeTo(arToolkitContext.arController.canvas);
          }
        }

        arToolkitSource.init(function onReady() {
          onResize();
        });

        // handle resize event
        window.addEventListener("resize", function () {
          onResize();
        });

        ////////////////////////////////////////////////////////////
        // setup arToolkitContext
        ////////////////////////////////////////////////////////////

        // create atToolkitContext
        arToolkitContext = new THREEx.ArToolkitContext({
          cameraParametersUrl: "data/camera_para.dat",
          detectionMode: "mono",
        });

        // copy projection matrix to camera when initialization complete
        arToolkitContext.init(function onCompleted() {
          camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());
        });

        ////////////////////////////////////////////////////////////
        // setup markerRoots
        ////////////////////////////////////////////////////////////

        // build markerControls
        markerRoot1 = new THREE.Group();
        scene.add(markerRoot1);
        let markerControls1 = new THREEx.ArMarkerControls(
          arToolkitContext,
          markerRoot1,
          {
            type: "pattern",
            patternUrl: "data/kanji.patt",
          }
        );

        let geometry1 = new THREE.PlaneBufferGeometry(2, 2, 4, 4);

        texture = new THREE.CanvasTexture(canvas);
        texture.minFilter = THREE.LinearFilter;
        texture.magFilter = THREE.LinearFilter;
        texture.format = THREE.RGBFormat;
        texture.needsUpdate = true;
        let material1 = new THREE.MeshBasicMaterial({
          transparent: true,
        });
        material1.map = texture;

        mesh1 = new THREE.Mesh(geometry1, material1);
        mesh1.rotation.x = -Math.PI / 2;
        // mesh1.scale.x=2

        markerRoot1.add(mesh1);

        gui = new dat.GUI();

        parameters = {
          x: 0,
          y: 0,
          z: 0,
          scale: 1,
          // reset: function() { resetPlane() }
        };

        let folder1 = gui.addFolder("Position");
        let planeX = folder1
          .add(parameters, "x")
          .min(-10)
          .max(10)
          .step(0.001)
          .listen();
        let planeY = folder1
          .add(parameters, "y")
          .min(-10)
          .max(10)
          .step(0.001)
          .listen();
        let planeZ = folder1
          .add(parameters, "z")
          .min(-10)
          .max(10)
          .step(0.001)
          .listen();
        folder1.open();

        planeX.onChange(function (value) {
          mesh1.position.x = value;
        });
        planeY.onChange(function (value) {
          mesh1.position.y = value;
        });
        planeZ.onChange(function (value) {
          mesh1.position.z = value;
        });

        let planeScale = gui
          .add(parameters, "scale")
          .min(1)
          .max(5)
          .step(0.001)
          .listen();

        planeScale.onChange(function (value) {
          mesh1.scale.x = value;
          mesh1.scale.y = value;
          mesh1.scale.z = value;
        });
        // gui.add( parameters, 'reset' ).name("Reset Video Params");

        gui.open();
        updatePlane();

        function resetPlane() {
          parameters.x = 0;
          parameters.y = 0;
          parameters.z = 0;
          parameters.scale = 1;

          updatePlane();
        }

        function updatePlane() {
          mesh1.position.x = parameters.x;
          mesh1.position.y = parameters.y;
          mesh1.position.z = parameters.z;
          // plane.scale.set(parameters.scale)
        }
      }

      function update() {
        // update artoolkit on every frame
        if (arToolkitSource.ready !== false)
          arToolkitContext.update(arToolkitSource.domElement);
      }

      function render() {
        renderer.render(scene, camera);
      }

      function animate() {
        requestAnimationFrame(animate);
        deltaTime = clock.getDelta();
        totalTime += deltaTime;
        texture.needsUpdate = true;
        update();
        render();
      }

      // Initialize the video stream from the user's camera
      // navigator.mediaDevices
      //   .getUserMedia({ video: true })
      //   .then(function (stream) {
      //     video.srcObject = stream;
      //   })
      //   .catch(function (error) {
      //     console.log("Error accessing the camera: ", error);
      //   });

      video.addEventListener("play", function () {
        const width = video.videoWidth;
        const height = video.videoHeight;
        canvas.width = width;
        canvas.height = height;

        function processVideo() {
          if (!video.paused && !video.ended) {
            ctx.drawImage(video, 0, 0, width, height);

            // Capture the current frame
            const frameData = ctx.getImageData(0, 0, width, height);
            const frame = frameData.data;

            // Perform your custom background subtraction logic here
            // For simplicity, let's assume we're removing pixels with a certain color (e.g., green background)

            for (let i = 0; i < frame.length; i += 4) {
              const r = frame[i];
              const g = frame[i + 1];
              const b = frame[i + 2];

              if (g > r && g > b) {
                // This pixel is considered part of the background (e.g., it's green)
                frame[i] = frame[i + 1] = frame[i + 2] = frame[i + 3] = 0; // Set it to transparent
              }
            }

            // Put the modified frame back on the canvas
            ctx.putImageData(frameData, 0, 0);

            // Request the next animation frame
            requestAnimationFrame(processVideo);
          }
        }
        processVideo();
      });
    </script>
  </body>
</html>
